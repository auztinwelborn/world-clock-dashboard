import {
  require_src
} from "./chunk-SZ6QUZOK.js";
import {
  __commonJS
} from "./chunk-ROME4SDB.js";

// node_modules/@statsig/web-analytics/src/AutoCaptureEvent.js
var require_AutoCaptureEvent = __commonJS({
  "node_modules/@statsig/web-analytics/src/AutoCaptureEvent.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AutoCaptureEventName = void 0;
    exports.AutoCaptureEventName = {
      PAGE_VIEW: "auto_capture::page_view",
      PAGE_VIEW_END: "auto_capture::page_view_end",
      ERROR: "auto_capture::error",
      SESSION_START: "auto_capture::session_start",
      PERFORMANCE: "auto_capture::performance",
      FORM_SUBMIT: "auto_capture::form_submit",
      CLICK: "auto_capture::click",
      RAGE_CLICK: "auto_capture::rage_click"
    };
  }
});

// node_modules/@statsig/web-analytics/src/EngagementManager.js
var require_EngagementManager = __commonJS({
  "node_modules/@statsig/web-analytics/src/EngagementManager.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.EngagementManager = void 0;
    var client_core_1 = require_src();
    var PAGE_INACTIVE_TIMEOUT = 6e5;
    var EngagementManager = class {
      constructor() {
        this._lastScrollY = 0;
        this._maxScrollY = 0;
        this._lastScrollPercentage = 0;
        this._maxScrollPercentage = 0;
        this._lastPageViewTime = Date.now();
        this._inactiveTimer = null;
        this._onInactivityCallback = null;
        this._initializeScrollTracking();
      }
      _initializeScrollTracking() {
        const win = (0, client_core_1._getWindowSafe)();
        if (!win)
          return;
        win.addEventListener("scroll", () => this._handleScroll());
        win.addEventListener("scrollend", () => this._handleScroll());
        win.addEventListener("resize", () => this._handleScroll());
      }
      _handleScroll() {
        const win = (0, client_core_1._getWindowSafe)();
        const doc = (0, client_core_1._getDocumentSafe)();
        if (!win || !doc)
          return;
        const scrollHeight = doc.body.scrollHeight;
        const scrollY = win.scrollY || doc.documentElement.scrollTop || 0;
        const innerHeight = win.innerHeight;
        this._lastScrollY = scrollY;
        this._maxScrollY = Math.max(this._maxScrollY, scrollY);
        const currentScrollPercentage = Math.min(100, Math.round((scrollY + innerHeight) / scrollHeight * 100));
        this._lastScrollPercentage = currentScrollPercentage;
        this._maxScrollPercentage = Math.max(this._maxScrollPercentage, currentScrollPercentage);
        this.bumpInactiveTimer();
      }
      getScrollMetrics() {
        return {
          lastScrollY: this._lastScrollY,
          maxScrollY: this._maxScrollY,
          lastScrollPercentage: this._lastScrollPercentage,
          maxScrollPercentage: this._maxScrollPercentage,
          scrollDepth: this._maxScrollPercentage
          // deprecated
        };
      }
      getPageViewLength() {
        return Date.now() - this._lastPageViewTime;
      }
      setLastPageViewTime(time) {
        this._lastPageViewTime = time;
      }
      startInactivityTracking(callback) {
        this._onInactivityCallback = callback;
      }
      bumpInactiveTimer() {
        const win = (0, client_core_1._getWindowSafe)();
        if (!win) {
          return;
        }
        if (this._inactiveTimer) {
          clearTimeout(this._inactiveTimer);
        }
        this._inactiveTimer = win.setTimeout(() => {
          if (this._onInactivityCallback) {
            this._onInactivityCallback();
          }
        }, PAGE_INACTIVE_TIMEOUT);
      }
    };
    exports.EngagementManager = EngagementManager;
  }
});

// node_modules/@statsig/web-analytics/src/RageClickManager.js
var require_RageClickManager = __commonJS({
  "node_modules/@statsig/web-analytics/src/RageClickManager.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var RAGE_CLICK_THRESHOLD_PX = 30;
    var RAGE_CLICK_TIMEOUT_MS = 1e3;
    var RAGE_CLICK_CLICK_COUNT = 3;
    var RageClickManager = class {
      constructor() {
        this._clicks = [];
      }
      isRageClick(x, y, timestamp) {
        this._clicks = this._clicks.filter((click) => timestamp - click.timestamp < RAGE_CLICK_TIMEOUT_MS);
        const isCloseEnough = (click) => {
          const dx = x - click.x;
          const dy = y - click.y;
          return Math.abs(dx) + Math.abs(dy) <= RAGE_CLICK_THRESHOLD_PX;
        };
        if (this._clicks.length > 0 && !isCloseEnough(this._clicks[this._clicks.length - 1])) {
          this._clicks = [];
        }
        this._clicks.push({ x, y, timestamp });
        return this._clicks.length >= RAGE_CLICK_CLICK_COUNT;
      }
    };
    exports.default = RageClickManager;
  }
});

// node_modules/@statsig/web-analytics/src/commonUtils.js
var require_commonUtils = __commonJS({
  "node_modules/@statsig/web-analytics/src/commonUtils.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports._getAnchorNodeInHierarchy = exports._getSafeTimezoneOffset = exports._getSafeTimezone = exports._getSafeNetworkInformation = exports._registerEventHandler = exports._getSanitizedPageUrl = exports._getSafeUrl = exports._shouldLogEvent = exports._getTargetNode = exports._stripEmptyValues = void 0;
    var client_core_1 = require_src();
    function _stripEmptyValues(obj) {
      return Object.fromEntries(Object.entries(obj).filter(([_, value]) => value != null && value !== "" && value !== void 0));
    }
    exports._stripEmptyValues = _stripEmptyValues;
    function _getTargetNode(e) {
      if (!e) {
        return null;
      }
      let target = e.target || e.srcElement;
      if (!target || !(target instanceof Element)) {
        return null;
      }
      if (target.nodeType === 3) {
        target = target.parentNode || null;
      }
      return target;
    }
    exports._getTargetNode = _getTargetNode;
    function _shouldLogEvent(e, el) {
      if (!e || !el || el.nodeType !== 1) {
        return false;
      }
      const tagName = el.tagName.toLowerCase();
      const eventType = e.type.toLowerCase();
      switch (tagName) {
        case "html":
          return false;
        case "form":
          return eventType === "submit";
        case "input":
        case "select":
        case "textarea":
          return ["change"].includes(eventType);
        default:
          if (eventType === "click") {
            if (tagName === "button") {
              return true;
            }
            const anchor = _getAnchorNodeInHierarchy(el);
            if (anchor) {
              return true;
            }
          }
          return false;
      }
    }
    exports._shouldLogEvent = _shouldLogEvent;
    function _getSafeUrl() {
      var _a, _b, _c;
      const href = (_c = (_b = (_a = (0, client_core_1._getWindowSafe)()) === null || _a === void 0 ? void 0 : _a.location) === null || _b === void 0 ? void 0 : _b.href) !== null && _c !== void 0 ? _c : "";
      let url;
      try {
        url = new URL(href);
      } catch (e) {
        url = new URL("error:");
      }
      return url;
    }
    exports._getSafeUrl = _getSafeUrl;
    function _getSanitizedPageUrl() {
      return (0, client_core_1._getCurrentPageUrlSafe)() || "";
    }
    exports._getSanitizedPageUrl = _getSanitizedPageUrl;
    function _registerEventHandler(element, eventType, handler) {
      if (!element || !element.addEventListener) {
        return;
      }
      element.addEventListener(eventType, handler, true);
    }
    exports._registerEventHandler = _registerEventHandler;
    function _getSafeNetworkInformation() {
      const win = (0, client_core_1._getWindowSafe)();
      if (!win || !win.navigator) {
        return null;
      }
      const connection = win.navigator.connection;
      if (!connection) {
        return null;
      }
      return connection;
    }
    exports._getSafeNetworkInformation = _getSafeNetworkInformation;
    function _getSafeTimezone() {
      try {
        return Intl.DateTimeFormat().resolvedOptions().timeZone;
      } catch (e) {
        return null;
      }
    }
    exports._getSafeTimezone = _getSafeTimezone;
    function _getSafeTimezoneOffset() {
      try {
        return (/* @__PURE__ */ new Date()).getTimezoneOffset();
      } catch (e) {
        return null;
      }
    }
    exports._getSafeTimezoneOffset = _getSafeTimezoneOffset;
    function _getAnchorNodeInHierarchy(node) {
      if (!node) {
        return null;
      }
      let parent = node;
      while (parent) {
        const parentTagName = parent.tagName.toLowerCase();
        if (["body", "document"].includes(parentTagName)) {
          return null;
        }
        if (parent.tagName.toLowerCase() === "a") {
          return parent;
        }
        parent = parent.parentElement;
      }
      return null;
    }
    exports._getAnchorNodeInHierarchy = _getAnchorNodeInHierarchy;
  }
});

// node_modules/@statsig/web-analytics/src/eventUtils.js
var require_eventUtils = __commonJS({
  "node_modules/@statsig/web-analytics/src/eventUtils.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports._getMetadataFromElement = exports._gatherEventData = void 0;
    var client_core_1 = require_src();
    var commonUtils_1 = require_commonUtils();
    var MAX_ATTRIBUTE_LENGTH = 1e3;
    var MAX_CLASS_LIST_LENGTH = 100;
    var MAX_SELECTOR_DEPTH = 50;
    function _gatherEventData(target) {
      const tagName = target.tagName.toLowerCase();
      const metadata = {};
      const value = (0, client_core_1._getCurrentPageUrlSafe)() || "";
      metadata["tagName"] = tagName;
      const elementMetadata = _getMetadataFromElement(target);
      Object.assign(metadata, elementMetadata);
      if (tagName === "form") {
        Object.assign(metadata, _getFormMetadata(target));
      }
      if (["input", "select", "textarea"].includes(tagName) && target.getAttribute("type") !== "password") {
        Object.assign(metadata, _getInputMetadata(target));
      }
      const anchor = (0, commonUtils_1._getAnchorNodeInHierarchy)(target);
      if (anchor) {
        Object.assign(metadata, _getAnchorMetadata(anchor));
      }
      if (tagName === "button" || anchor) {
        Object.assign(metadata, _getButtonMetadata(anchor || target));
      }
      return { value, metadata };
    }
    exports._gatherEventData = _gatherEventData;
    function _getFormMetadata(target) {
      var _a;
      const metadata = {};
      metadata["action"] = target.getAttribute("action");
      metadata["method"] = (_a = target.getAttribute("method")) !== null && _a !== void 0 ? _a : "GET";
      metadata["formName"] = target.getAttribute("name");
      metadata["formId"] = target.getAttribute("id");
      return metadata;
    }
    function _getInputMetadata(target) {
      const metadata = {};
      metadata["content"] = target.value;
      metadata["inputName"] = target.getAttribute("name");
      return metadata;
    }
    function _getAnchorMetadata(anchor) {
      const metadata = {};
      metadata["href"] = anchor.getAttribute("href");
      return metadata;
    }
    function _getButtonMetadata(target) {
      const metadata = {};
      metadata["content"] = (target.textContent || "").trim();
      const dataset = _gatherDatasetProperties(target);
      Object.assign(metadata, dataset);
      return metadata;
    }
    function _gatherDatasetProperties(el) {
      const dataset = {};
      if (!el) {
        return dataset;
      }
      const attr = el === null || el === void 0 ? void 0 : el.dataset;
      if (!attr) {
        return dataset;
      }
      for (const key in attr) {
        dataset[`data-${key}`] = attr[key] || "";
      }
      return dataset;
    }
    function _truncateString(str, maxLength) {
      if (!str)
        return null;
      return str.length > maxLength ? str.substring(0, maxLength) + "..." : str;
    }
    function _getMetadataFromElement(target) {
      const metadata = {};
      const classList = Array.from(target.classList);
      metadata["classList"] = classList.length > 0 ? classList.slice(0, MAX_CLASS_LIST_LENGTH) : null;
      metadata["class"] = _normalizeClassAttribute(_truncateString(target.getAttribute("class"), MAX_ATTRIBUTE_LENGTH) || "");
      metadata["id"] = _truncateString(target.getAttribute("id"), MAX_ATTRIBUTE_LENGTH);
      metadata["ariaLabel"] = _truncateString(target.getAttribute("aria-label"), MAX_ATTRIBUTE_LENGTH);
      metadata["selector"] = _generateCssSelector(target);
      return metadata;
    }
    exports._getMetadataFromElement = _getMetadataFromElement;
    function _normalizeClassAttribute(className) {
      return className.replace(/\s+/g, " ").trim();
    }
    function hasNextSiblingWithSameTag(element) {
      let sibling = element.nextElementSibling;
      while (sibling) {
        if (sibling.tagName === element.tagName) {
          return true;
        }
        sibling = sibling.nextElementSibling;
      }
      return false;
    }
    function getElementSelector(element) {
      const tagName = element.tagName.toLowerCase();
      if (element.id) {
        return `#${element.id}`;
      }
      let selector = tagName;
      if (element.className && typeof element.className === "string") {
        const classes = element.className.trim().split(/\s+/);
        if (classes.length > 0 && classes[0] !== "") {
          selector += "." + classes.join(".");
        }
      }
      const parent = element.parentElement;
      if (parent && parent.children.length > 1) {
        let nthChild = 1;
        let nthOfType = 1;
        let sibling = element.previousElementSibling;
        while (sibling) {
          nthChild++;
          if (sibling.tagName === element.tagName) {
            nthOfType++;
          }
          sibling = sibling.previousElementSibling;
        }
        selector += `:nth-child(${nthChild})`;
        if (nthOfType > 1 || hasNextSiblingWithSameTag(element)) {
          selector += `:nth-of-type(${nthOfType})`;
        }
      }
      return selector;
    }
    function _generateCssSelector(element) {
      if (!element) {
        return "";
      }
      if (!element.parentNode) {
        const tagName = element.tagName.toLowerCase();
        if (element.id) {
          return `#${element.id}`;
        }
        let selector = tagName;
        if (element.className && typeof element.className === "string") {
          const classes = element.className.trim().split(/\s+/);
          if (classes.length > 0 && classes[0] !== "") {
            selector += "." + classes.join(".");
          }
        }
        return selector;
      }
      const selectors = [];
      let currentElement = element;
      let depth = 0;
      while (currentElement && currentElement.nodeType === Node.ELEMENT_NODE && depth < MAX_SELECTOR_DEPTH) {
        const selector = getElementSelector(currentElement);
        selectors.unshift(selector);
        if (currentElement.id) {
          break;
        }
        currentElement = currentElement.parentElement;
        if (currentElement && currentElement.tagName.toLowerCase() === "body") {
          break;
        }
        depth++;
      }
      return selectors.join(" > ");
    }
  }
});

// node_modules/@statsig/web-analytics/src/metadataUtils.js
var require_metadataUtils = __commonJS({
  "node_modules/@statsig/web-analytics/src/metadataUtils.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports._getNetworkInfo = exports._gatherAllMetadata = exports._gatherCommonMetadata = void 0;
    var client_core_1 = require_src();
    var commonUtils_1 = require_commonUtils();
    function _gatherCommonMetadata(url) {
      var _a, _b, _c, _d, _e, _f, _g, _h;
      const safeDoc = (0, client_core_1._getDocumentSafe)();
      const safeWnd = (0, client_core_1._getWindowSafe)();
      return (0, commonUtils_1._stripEmptyValues)(Object.assign({ title: safeDoc === null || safeDoc === void 0 ? void 0 : safeDoc.title, current_url: (_a = safeWnd === null || safeWnd === void 0 ? void 0 : safeWnd.location) === null || _a === void 0 ? void 0 : _a.href, user_agent: ((_b = safeWnd === null || safeWnd === void 0 ? void 0 : safeWnd.navigator) === null || _b === void 0 ? void 0 : _b.userAgent) && ((_d = (_c = safeWnd === null || safeWnd === void 0 ? void 0 : safeWnd.navigator) === null || _c === void 0 ? void 0 : _c.userAgent) === null || _d === void 0 ? void 0 : _d.length) > 200 ? safeWnd.navigator.userAgent.substring(0, 200) : (_e = safeWnd === null || safeWnd === void 0 ? void 0 : safeWnd.navigator) === null || _e === void 0 ? void 0 : _e.userAgent, locale: (_f = safeWnd === null || safeWnd === void 0 ? void 0 : safeWnd.navigator) === null || _f === void 0 ? void 0 : _f.language, hostname: url.hostname, pathname: url.pathname, screen_width: (_g = safeWnd === null || safeWnd === void 0 ? void 0 : safeWnd.screen) === null || _g === void 0 ? void 0 : _g.width, screen_height: (_h = safeWnd === null || safeWnd === void 0 ? void 0 : safeWnd.screen) === null || _h === void 0 ? void 0 : _h.height, viewport_width: safeWnd === null || safeWnd === void 0 ? void 0 : safeWnd.innerWidth, viewport_height: safeWnd === null || safeWnd === void 0 ? void 0 : safeWnd.innerHeight, timestamp: Date.now(), timezone: (0, commonUtils_1._getSafeTimezone)(), timezone_offset: (0, commonUtils_1._getSafeTimezoneOffset)() }, _getNetworkInfo()));
    }
    exports._gatherCommonMetadata = _gatherCommonMetadata;
    function _gatherAllMetadata(url) {
      const safeDoc = (0, client_core_1._getDocumentSafe)();
      const safeWnd = (0, client_core_1._getWindowSafe)();
      if (!safeDoc || !safeWnd) {
        return {};
      }
      const referrerInfo = getReferrerInfo(safeDoc);
      const commonInfo = _gatherCommonMetadata(url);
      const campaignParams = getCampaignParams(url);
      const queryParams = {};
      url.searchParams.forEach((v, k) => {
        queryParams[k] = v;
      });
      return Object.assign(Object.assign({}, commonInfo), (0, commonUtils_1._stripEmptyValues)(Object.assign(Object.assign(Object.assign({}, referrerInfo), campaignParams), queryParams)));
    }
    exports._gatherAllMetadata = _gatherAllMetadata;
    function _getNetworkInfo() {
      const networkInfo = (0, commonUtils_1._getSafeNetworkInformation)();
      const result = {};
      if ((networkInfo === null || networkInfo === void 0 ? void 0 : networkInfo.effectiveType) !== void 0) {
        result["effective_connection_type"] = networkInfo.effectiveType;
      }
      if ((networkInfo === null || networkInfo === void 0 ? void 0 : networkInfo.rtt) !== void 0) {
        result["rtt_ms"] = networkInfo.rtt;
      }
      if ((networkInfo === null || networkInfo === void 0 ? void 0 : networkInfo.downlink) !== void 0) {
        result["downlink_mbps"] = networkInfo.downlink;
        result["downlink_kbps"] = networkInfo.downlink * 1e3;
      }
      if ((networkInfo === null || networkInfo === void 0 ? void 0 : networkInfo.saveData) !== void 0) {
        result["save_data"] = networkInfo.saveData;
      }
      return result;
    }
    exports._getNetworkInfo = _getNetworkInfo;
    function getReferrerInfo(safeDoc) {
      const referrer = (safeDoc === null || safeDoc === void 0 ? void 0 : safeDoc.referrer) || "";
      if (!referrer) {
        return {
          referrer: null,
          referrer_domain: null,
          referrer_path: null,
          searchEngine: "",
          searchQuery: ""
        };
      }
      try {
        const url = new URL(referrer);
        const host = url.hostname;
        const searchEngine = ["google", "bing", "yahoo", "duckduckgo", "baidu"].find((e) => host.includes(e + ".")) || "";
        const searchQuery = url.searchParams.get(searchEngine === "yahoo" ? "p" : "q") || "";
        return {
          referrer,
          referrer_domain: url.hostname,
          referrer_path: url.pathname,
          searchEngine,
          searchQuery
        };
      } catch (e) {
        return {
          referrer: null,
          referrer_domain: null,
          referrer_path: null,
          searchEngine: "",
          searchQuery: ""
        };
      }
    }
    function getCampaignParams(url) {
      const urlParams = url.searchParams;
      const campaignParams = {};
      const commonUtms = [
        "utm_source",
        "utm_medium",
        "utm_campaign",
        "utm_term",
        "utm_content",
        "msclkid",
        // Bing
        "dclid",
        // DoubleClick
        "fbclid",
        // Facebook
        "gad_source",
        // Google
        "gclid",
        // Google
        "gclsrc",
        // Google
        "wbraid",
        // Google
        "utm_id",
        // Hubspot
        "irclid",
        // Impact
        "igshid",
        // Instagram
        "_kx",
        // Klaviyo
        "li_fat_id",
        // LinkedIn
        "mc_cid",
        // Mailchimp
        "mc_eid",
        // Mailchimp
        "epik",
        // Pinterest
        "qclid",
        // Quora
        "rdt_cid",
        // Reddit
        "sccid",
        // Snapchat
        "ttc",
        // TikTok
        "ttclid",
        // TikTok
        "ttc_id",
        // TikTok
        "twclid"
        // Twitter
      ];
      commonUtms.forEach((p) => {
        const val = urlParams.get(p);
        if (val) {
          campaignParams[p] = val;
        }
      });
      return campaignParams;
    }
  }
});

// node_modules/@statsig/web-analytics/src/AutoCapture.js
var require_AutoCapture = __commonJS({
  "node_modules/@statsig/web-analytics/src/AutoCapture.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AutoCapture = exports.runStatsigAutoCapture = exports.StatsigAutoCapturePlugin = void 0;
    var client_core_1 = require_src();
    var AutoCaptureEvent_1 = require_AutoCaptureEvent();
    var EngagementManager_1 = require_EngagementManager();
    var RageClickManager_1 = require_RageClickManager();
    var commonUtils_1 = require_commonUtils();
    var eventUtils_1 = require_eventUtils();
    var metadataUtils_1 = require_metadataUtils();
    var AUTO_EVENT_MAPPING = {
      submit: AutoCaptureEvent_1.AutoCaptureEventName.FORM_SUBMIT,
      click: AutoCaptureEvent_1.AutoCaptureEventName.CLICK
    };
    var StatsigAutoCapturePlugin = class {
      constructor(_options) {
        this._options = _options;
        this.__plugin = "auto-capture";
      }
      bind(client) {
        runStatsigAutoCapture(client, this._options);
      }
    };
    exports.StatsigAutoCapturePlugin = StatsigAutoCapturePlugin;
    function runStatsigAutoCapture(client, options) {
      return new AutoCapture(client, options);
    }
    exports.runStatsigAutoCapture = runStatsigAutoCapture;
    var AutoCapture = class {
      constructor(_client, options) {
        var _a, _b, _c;
        this._client = _client;
        this._disabledEvents = {};
        this._previousLoggedPageViewUrl = null;
        this._hasLoggedPageViewEnd = false;
        const { sdkKey, errorBoundary, values } = _client.getContext();
        this._disabledEvents = (_b = (_a = values === null || values === void 0 ? void 0 : values.auto_capture_settings) === null || _a === void 0 ? void 0 : _a.disabled_events) !== null && _b !== void 0 ? _b : {};
        this._errorBoundary = errorBoundary;
        this._errorBoundary.wrap(this);
        this._client.$on("values_updated", () => {
          var _a2, _b2;
          const values2 = this._client.getContext().values;
          this._disabledEvents = (_b2 = (_a2 = values2 === null || values2 === void 0 ? void 0 : values2.auto_capture_settings) === null || _a2 === void 0 ? void 0 : _a2.disabled_events) !== null && _b2 !== void 0 ? _b2 : this._disabledEvents;
        });
        this._engagementManager = new EngagementManager_1.EngagementManager();
        this._rageClickManager = new RageClickManager_1.default();
        this._eventFilterFunc = options === null || options === void 0 ? void 0 : options.eventFilterFunc;
        const doc = (0, client_core_1._getDocumentSafe)();
        if (!(0, client_core_1._isServerEnv)()) {
          __STATSIG__ = (0, client_core_1._getStatsigGlobal)();
          const instances = (_c = __STATSIG__.acInstances) !== null && _c !== void 0 ? _c : {};
          instances[sdkKey] = this;
          __STATSIG__.acInstances = instances;
        }
        if ((doc === null || doc === void 0 ? void 0 : doc.readyState) === "loading") {
          doc.addEventListener("DOMContentLoaded", () => this._initialize());
          return;
        }
        this._initialize();
      }
      _addEventHandlers() {
        const win = (0, client_core_1._getWindowSafe)();
        const doc = (0, client_core_1._getDocumentSafe)();
        if (!win || !doc) {
          return;
        }
        const eventHandler = (event, userAction = true) => {
          var _a;
          const e = event || ((_a = (0, client_core_1._getWindowSafe)()) === null || _a === void 0 ? void 0 : _a.event);
          this._autoLogEvent(e);
          if (userAction) {
            this._engagementManager.bumpInactiveTimer();
          }
          if (e.type === "click" && e instanceof MouseEvent) {
            const isRageClick = this._rageClickManager.isRageClick(e.clientX, e.clientY, Date.now());
            if (isRageClick) {
              this._logRageClick(e);
            }
          }
        };
        (0, commonUtils_1._registerEventHandler)(doc, "click", (e) => eventHandler(e));
        (0, commonUtils_1._registerEventHandler)(doc, "submit", (e) => eventHandler(e));
        (0, commonUtils_1._registerEventHandler)(win, "error", (e) => eventHandler(e, false));
        (0, commonUtils_1._registerEventHandler)(win, "pagehide", () => this._tryLogPageViewEnd());
        (0, commonUtils_1._registerEventHandler)(win, "beforeunload", () => this._tryLogPageViewEnd());
      }
      _addPageViewTracking() {
        const win = (0, client_core_1._getWindowSafe)();
        const doc = (0, client_core_1._getDocumentSafe)();
        if (!win || !doc) {
          return;
        }
        (0, commonUtils_1._registerEventHandler)(win, "popstate", () => this._tryLogPageView());
        window.history.pushState = new Proxy(window.history.pushState, {
          apply: (target, thisArg, [state, unused, url]) => {
            target.apply(thisArg, [state, unused, url]);
            this._tryLogPageView();
          }
        });
        this._tryLogPageView();
      }
      _autoLogEvent(event) {
        var _a;
        const eventType = (_a = event.type) === null || _a === void 0 ? void 0 : _a.toLowerCase();
        if (eventType === "error" && event instanceof ErrorEvent) {
          this._logError(event);
          return;
        }
        const target = (0, commonUtils_1._getTargetNode)(event);
        if (!target) {
          return;
        }
        if (!(0, commonUtils_1._shouldLogEvent)(event, target)) {
          return;
        }
        const eventName = AUTO_EVENT_MAPPING[eventType];
        if (!eventName) {
          return;
        }
        const { value, metadata } = (0, eventUtils_1._gatherEventData)(target);
        const allMetadata = (0, metadataUtils_1._gatherAllMetadata)((0, commonUtils_1._getSafeUrl)());
        this._enqueueAutoCapture(eventName, value, Object.assign(Object.assign({}, allMetadata), metadata));
      }
      _initialize() {
        this._engagementManager.startInactivityTracking(() => this._tryLogPageViewEnd(true));
        this._addEventHandlers();
        this._addPageViewTracking();
        this._logSessionStart();
        this._logPerformance();
      }
      _logError(event) {
        const error = (event === null || event === void 0 ? void 0 : event.error) || {};
        let errorStr = error;
        if (typeof error === "object") {
          try {
            errorStr = JSON.stringify(error);
          } catch (e) {
            errorStr = typeof (error === null || error === void 0 ? void 0 : error.toString) === "function" ? error.toString() : "Unknown Error";
          }
        }
        this._enqueueAutoCapture(AutoCaptureEvent_1.AutoCaptureEventName.ERROR, event.message, {
          message: event.message,
          filename: event.filename,
          lineno: event.lineno,
          colno: event.colno,
          error_str: errorStr
        });
      }
      _logSessionStart() {
        const session = this._getSessionFromClient();
        try {
          if (!this._isNewSession(session)) {
            return;
          }
          this._enqueueAutoCapture(AutoCaptureEvent_1.AutoCaptureEventName.SESSION_START, (0, commonUtils_1._getSanitizedPageUrl)(), { sessionID: session.data.sessionID }, { flushImmediately: true });
        } catch (err) {
          this._errorBoundary.logError("AC::logSession", err);
        }
      }
      _tryLogPageView() {
        const url = (0, commonUtils_1._getSafeUrl)();
        const last = this._previousLoggedPageViewUrl;
        if (last && url.href === last.href) {
          return;
        }
        this._engagementManager.setLastPageViewTime(Date.now());
        this._previousLoggedPageViewUrl = url;
        this._hasLoggedPageViewEnd = false;
        const payload = (0, metadataUtils_1._gatherAllMetadata)(url);
        this._enqueueAutoCapture(AutoCaptureEvent_1.AutoCaptureEventName.PAGE_VIEW, (0, commonUtils_1._getSanitizedPageUrl)(), payload, {
          flushImmediately: true,
          addNewSessionMetadata: true
        });
        this._engagementManager.bumpInactiveTimer();
      }
      _tryLogPageViewEnd(dueToInactivity = false) {
        if (this._hasLoggedPageViewEnd) {
          return;
        }
        this._hasLoggedPageViewEnd = true;
        const scrollMetrics = this._engagementManager.getScrollMetrics();
        const pageViewLength = this._engagementManager.getPageViewLength();
        this._enqueueAutoCapture(AutoCaptureEvent_1.AutoCaptureEventName.PAGE_VIEW_END, (0, commonUtils_1._getSanitizedPageUrl)(), Object.assign(Object.assign({}, scrollMetrics), {
          pageViewLength,
          dueToInactivity
        }), {
          flushImmediately: true
        });
      }
      _logRageClick(e) {
        const { value, metadata } = (0, eventUtils_1._gatherEventData)(e.target);
        this._enqueueAutoCapture(AutoCaptureEvent_1.AutoCaptureEventName.RAGE_CLICK, value, Object.assign(Object.assign({ x: e.clientX, y: e.clientY, timestamp: Date.now() }, (0, metadataUtils_1._gatherAllMetadata)((0, commonUtils_1._getSafeUrl)())), metadata));
      }
      _logPerformance() {
        const win = (0, client_core_1._getWindowSafe)();
        if (!win || !win.performance) {
          return;
        }
        if (typeof (win === null || win === void 0 ? void 0 : win.performance) === "undefined" || typeof win.performance.getEntriesByType !== "function" || typeof win.performance.getEntriesByName !== "function") {
          return;
        }
        setTimeout(() => {
          const metadata = {};
          const navEntries = win.performance.getEntriesByType("navigation");
          if (navEntries && navEntries.length > 0 && navEntries[0] instanceof PerformanceNavigationTiming) {
            const nav = navEntries[0];
            metadata["load_time_ms"] = nav.duration;
            metadata["dom_interactive_time_ms"] = nav.domInteractive - nav.startTime;
            metadata["redirect_count"] = nav.redirectCount;
            metadata["transfer_bytes"] = nav.transferSize;
          }
          const fpEntries = win.performance.getEntriesByName("first-contentful-paint");
          if (fpEntries && fpEntries.length > 0 && fpEntries[0] instanceof PerformancePaintTiming) {
            metadata["first_contentful_paint_time_ms"] = fpEntries[0].startTime;
          }
          this._enqueueAutoCapture(AutoCaptureEvent_1.AutoCaptureEventName.PERFORMANCE, (0, commonUtils_1._getSanitizedPageUrl)(), Object.assign(Object.assign({}, metadata), (0, metadataUtils_1._getNetworkInfo)()));
        }, 1);
      }
      _enqueueAutoCapture(eventName, value, metadata, options) {
        var _a, _b, _c;
        const subname = eventName.slice("auto_capture::".length);
        if (this._disabledEvents[eventName] || this._disabledEvents[subname]) {
          return;
        }
        const session = this._getSessionFromClient();
        try {
          const logMetadata = Object.assign({ sessionID: session.data.sessionID, page_url: (_c = (_b = (_a = (0, client_core_1._getWindowSafe)()) === null || _a === void 0 ? void 0 : _a.location) === null || _b === void 0 ? void 0 : _b.href) !== null && _c !== void 0 ? _c : "" }, metadata);
          if (options === null || options === void 0 ? void 0 : options.addNewSessionMetadata) {
            logMetadata["isNewSession"] = String(this._isNewSession(session));
          }
          const event = {
            eventName,
            value,
            metadata: logMetadata
          };
          if (this._eventFilterFunc && !this._eventFilterFunc(event)) {
            return;
          }
          this._client.logEvent(event);
          if (options === null || options === void 0 ? void 0 : options.flushImmediately) {
            this._client.flush().catch((e) => {
              client_core_1.Log.error(e);
            });
          }
        } catch (err) {
          this._errorBoundary.logError("AC::enqueue", err);
        }
      }
      _isNewSession(session) {
        return Math.abs(session.data.startTime - Date.now()) < 1e3;
      }
      _getSessionFromClient() {
        return this._client.getContext().session;
      }
    };
    exports.AutoCapture = AutoCapture;
  }
});

// node_modules/@statsig/web-analytics/src/index.js
var require_src2 = __commonJS({
  "node_modules/@statsig/web-analytics/src/index.js"(exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.StatsigAutoCapturePlugin = exports.runStatsigAutoCapture = exports.AutoCapture = exports.AutoCaptureEventName = void 0;
    var client_core_1 = require_src();
    var AutoCapture_1 = require_AutoCapture();
    Object.defineProperty(exports, "AutoCapture", { enumerable: true, get: function() {
      return AutoCapture_1.AutoCapture;
    } });
    Object.defineProperty(exports, "StatsigAutoCapturePlugin", { enumerable: true, get: function() {
      return AutoCapture_1.StatsigAutoCapturePlugin;
    } });
    Object.defineProperty(exports, "runStatsigAutoCapture", { enumerable: true, get: function() {
      return AutoCapture_1.runStatsigAutoCapture;
    } });
    var AutoCaptureEvent_1 = require_AutoCaptureEvent();
    Object.defineProperty(exports, "AutoCaptureEventName", { enumerable: true, get: function() {
      return AutoCaptureEvent_1.AutoCaptureEventName;
    } });
    var __STATSIG__2 = Object.assign((0, client_core_1._getStatsigGlobal)(), {
      AutoCapture: AutoCapture_1.AutoCapture,
      runStatsigAutoCapture: AutoCapture_1.runStatsigAutoCapture,
      StatsigAutoCapturePlugin: AutoCapture_1.StatsigAutoCapturePlugin
    });
    exports.default = __STATSIG__2;
  }
});
export default require_src2();
//# sourceMappingURL=@statsig_web-analytics.js.map
