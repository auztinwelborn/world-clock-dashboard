"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SessionReplay = exports.runStatsigSessionReplay = exports.StatsigSessionReplayPlugin = void 0;
const client_core_1 = require("@statsig/client-core");
const SessionReplayBase_1 = require("./SessionReplayBase");
const SessionReplayUtils_1 = require("./SessionReplayUtils");
class StatsigSessionReplayPlugin {
    constructor(options) {
        this.options = options;
        this.__plugin = 'session-replay';
    }
    bind(client) {
        runStatsigSessionReplay(client, this.options);
    }
}
exports.StatsigSessionReplayPlugin = StatsigSessionReplayPlugin;
function runStatsigSessionReplay(client, options) {
    new SessionReplay(client, options);
}
exports.runStatsigSessionReplay = runStatsigSessionReplay;
class SessionReplay extends SessionReplayBase_1.SessionReplayBase {
    constructor(client, options) {
        var _a;
        super(client, options);
        this._client.$on('values_updated', () => {
            var _a;
            if (!this._wasStopped) {
                this._attemptToStartRecording((_a = this._options) === null || _a === void 0 ? void 0 : _a.forceRecording);
            }
        });
        this._attemptToStartRecording((_a = this._options) === null || _a === void 0 ? void 0 : _a.forceRecording);
    }
    _shutdown(endReason) {
        super._shutdownImpl(endReason);
    }
    _attemptToStartRecording(force = false) {
        var _a, _b;
        if (this._totalLogs >= SessionReplayUtils_1.MAX_LOGS) {
            return;
        }
        const values = this._client.getContext().values;
        if ((values === null || values === void 0 ? void 0 : values.recording_blocked) === true) {
            this._shutdown();
            return;
        }
        if (!force && (values === null || values === void 0 ? void 0 : values.can_record_session) !== true) {
            this._shutdown();
            return;
        }
        if ((values === null || values === void 0 ? void 0 : values.passes_session_recording_targeting) === false) {
            this._shutdown();
            return;
        }
        if (this._replayer.isRecording()) {
            return;
        }
        this._wasStopped = false;
        client_core_1.StatsigMetadataProvider.add({ isRecordingSession: 'true' });
        this._replayer.record((e, d) => this._onRecordingEvent(e, d), (_b = (_a = this._options) === null || _a === void 0 ? void 0 : _a.rrwebConfig) !== null && _b !== void 0 ? _b : {}, () => {
            this._shutdown();
        });
    }
}
exports.SessionReplay = SessionReplay;
