"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports._appendSlicedMetadata = exports._slicePayload = exports._makeLoggableRrwebEvent = exports.MAX_LOGS = exports.MAX_INDIVIDUAL_EVENT_BYTES = exports.REPLAY_ENQUEUE_TRIGGER_BYTES = void 0;
const client_core_1 = require("@statsig/client-core");
const REPLAY_SLICE_BYTES = 1024 * 1024; // 1 MB
exports.REPLAY_ENQUEUE_TRIGGER_BYTES = 1024 * 10; // 10 KB
exports.MAX_INDIVIDUAL_EVENT_BYTES = 1024 * 1024 * 10; // 10 MB
exports.MAX_LOGS = 10000; // 10K logs
function _makeLoggableRrwebEvent(slice, payload, sessionID, data) {
    const metadata = {
        session_start_ts: String(data.startTime),
        session_end_ts: String(data.endTime),
        clicks_captured_cumulative: String(data.clickCount),
        rrweb_events: slice,
        rrweb_payload_size: String(payload.length),
        session_replay_sdk_version: client_core_1.SDK_VERSION,
    };
    return {
        eventName: 'statsig::session_recording',
        value: sessionID,
        metadata,
    };
}
exports._makeLoggableRrwebEvent = _makeLoggableRrwebEvent;
function _slicePayload(payload) {
    const parts = [];
    for (let i = 0; i < payload.length; i += REPLAY_SLICE_BYTES) {
        parts.push(payload.slice(i, i + REPLAY_SLICE_BYTES));
    }
    return parts;
}
exports._slicePayload = _slicePayload;
function _appendSlicedMetadata(metadata, slicedID, sliceIndex, sliceCount, sliceByteSize) {
    metadata.sliced_id = slicedID;
    metadata.slice_index = String(sliceIndex);
    metadata.slice_count = String(sliceCount);
    metadata.slice_byte_size = String(sliceByteSize);
}
exports._appendSlicedMetadata = _appendSlicedMetadata;
